#!/usr/bin/env python3

import logging
import os
import re
import shutil
from datetime import datetime
from pathlib import Path
from typing import Optional, Set

import yaml


# Configure logging
def setup_logging():
    """Configure logging with both file and console handlers."""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    # Create formatters
    console_formatter = logging.Formatter(
        "%(asctime)s - %(levelname)s - %(message)s", datefmt="%H:%M:%S"
    )
    file_formatter = logging.Formatter(
        "%(asctime)s - %(levelname)s [%(filename)s:%(lineno)d] - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    # Console handler with colors
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(logging.INFO)

    # File handler for detailed logging
    file_handler = logging.FileHandler(
        log_dir / f"sync-obsidian-{datetime.now().strftime('%Y%m%d-%H%M%S')}.log"
    )
    file_handler.setFormatter(file_formatter)
    file_handler.setLevel(logging.DEBUG)

    # Setup root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)

    return root_logger


HUGO_CONTENT = Path(os.getenv("HUGO_CONTENT", ""))
OBSIDIAN_VAULT = Path(os.getenv("OBSIDIAN_VAULT", ""))
SECTION_MAPS = {
    "01 Resources": "resources",  # Resources
    "02 Topics": "topics",  # Documentation/Knowledge base
    "03 Writing": "blog",  # Blog posts
    "10 Lists": "lists",  # Lists
}


def clean_title(title):
    """
    Remove numeric prefixes and clean up title.

    My Obsidian vault is organized using a variation of Johnny Decimal, so to
    publish it on a friendly way we want to remove the number indexes from the
    notes.
    """
    #
    title = re.sub(r"^\d+(\.\d+)*\s*", "", title)
    return title.strip()


def clean_path(path):
    """Clean path components for URLs."""
    # Remove numeric prefixes from path components and convert to lowercase
    parts = [clean_title(part).lower().replace(" ", "-") for part in path.parts]
    return Path(*parts)


def determine_section(file_path: Path) -> str:
    """Determine the section based on the file path."""
    relative_path = file_path.relative_to(OBSIDIAN_VAULT)
    first_dir: Optional[str] = (
        relative_path.parts[0] if len(relative_path.parts) > 1 else None
    )

    # Get the mapped section or use a default
    return SECTION_MAPS.get(str(first_dir) if first_dir else "", "pages")


def is_published(file_path: Path) -> bool:
    """Check if a file is marked for publishing."""
    with open(file_path, "r", encoding="utf-8") as f:
        content = f.read()

    frontmatter, _ = extract_frontmatter(content)
    return frontmatter.get("publish", False)


def find_published_notes(directory: Path) -> Set[Path]:
    """Find all published notes in a directory and its subdirectories."""
    published = set()
    for file_path in directory.rglob("*.md"):
        if ".trash" not in str(file_path) and ".git" not in str(file_path):
            if is_published(file_path):
                published.add(file_path)
    return published


def process_index_file(source_path: Path, dest_path: Path):
    """Process an index file (folder description) from Obsidian to Hugo."""
    with open(source_path, "r", encoding="utf-8") as f:
        content = f.read()

    frontmatter, content = extract_frontmatter(content)

    # If no frontmatter exists, create one with the title
    if not frontmatter:
        frontmatter = {"title": clean_title(source_path.parent.name), "draft": False}

    # Convert content
    content = convert_obsidian_links(content)

    # Create Hugo content
    hugo_content = f"---\n{yaml.dump(frontmatter)}---\n\n{content}"

    # Create parent directories if they don't exist
    dest_path.parent.mkdir(parents=True, exist_ok=True)

    # Write the file
    with open(dest_path, "w", encoding="utf-8") as f:
        f.write(hugo_content)

    print(
        f"Processed index: {source_path.relative_to(OBSIDIAN_VAULT)} -> {dest_path.relative_to(HUGO_CONTENT)}"
    )


def extract_frontmatter(content):
    """Extract YAML frontmatter from markdown content."""
    if content.startswith("---\n"):
        parts = content.split("---\n", 2)
        if len(parts) >= 3:
            try:
                frontmatter = yaml.safe_load(parts[1])
                return frontmatter, parts[2]
            except yaml.YAMLError:
                return {}, content
    return {}, content


def convert_obsidian_links(content):
    """Convert Obsidian-style links to Hugo markdown."""
    # Convert [[Page Name]] to [Page Name](page-name)
    content = re.sub(
        r"\[\[(.*?)\]\]",
        lambda m: f"[{clean_title(m.group(1))}]({clean_title(m.group(1)).lower().replace(' ', '-')})",
        content,
    )

    # Convert ![[image.png]] to ![](image.png)
    content = re.sub(r"!\[\[(.*?)\]\]", r"![](\1)", content)

    # Convert callouts to Hugo shortcodes
    content = re.sub(
        r"> \[!(\w+)\](.*?)\n", r"{{< callout \1 >}}\2{{< /callout >}}\n", content
    )

    return content


def determine_resource_category(file_path: Path) -> Optional[str]:
    """Determine the resource category based on the file path."""
    relative_path = file_path.relative_to(OBSIDIAN_VAULT)
    if len(relative_path.parts) < 3:  # Must be at least "01 Resources/category/file.md"
        return None

    # The category is the second path component under "01 Resources"
    category = clean_title(relative_path.parts[1])
    return category.lower()


def process_file(file_path: Path):
    """Process a single markdown file."""
    logger = logging.getLogger()

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        frontmatter, content = extract_frontmatter(content)

        # Skip if not marked for publishing
        if not frontmatter.get("publish", False):
            logger.debug(f"Skipping unpublished file: {file_path}")
            return

        # Convert content
        logger.debug(f"Converting content for: {file_path}")
        content = convert_obsidian_links(content)

        # Determine the section
        section = determine_section(file_path)
        logger.debug(f"Determined section '{section}' for: {file_path}")

        # Clean up the title
        title = frontmatter.get("title", clean_title(file_path.stem))
        logger.debug(f"Using title: {title}")

        # Prepare Hugo frontmatter
        hugo_frontmatter = {
            "title": title,
            "date": frontmatter.get("date", datetime.now().strftime("%Y-%m-%d")),
            "lastmod": datetime.now().strftime("%Y-%m-%d"),
            "draft": False,
        }

        # Add section-specific frontmatter
        if section == "blog":
            hugo_frontmatter["type"] = "post"
            logger.debug("Setting type: post")

        elif section == "resources":
            hugo_frontmatter["type"] = "page"
            logger.debug("Setting type: page (resource)")

            # Set the category based on the subdirectory
            category = determine_resource_category(file_path)
            if category:
                hugo_frontmatter["categories"] = [category]
                logger.debug(f"Setting resource category: {category}")

        else:
            hugo_frontmatter["type"] = "page"
            logger.debug("Setting type: page")

        # Copy over other relevant frontmatter fields
        for key in ["tags", "description", "aliases", "weight"]:
            if key in frontmatter:
                hugo_frontmatter[key] = frontmatter[key]
                logger.debug(f"Copied frontmatter field: {key}")

        # If frontmatter already has categories and we're not in resources section,
        # preserve them
        if "categories" in frontmatter and section != "resources":
            hugo_frontmatter["categories"] = frontmatter["categories"]
            logger.debug("Preserved existing categories")

        # Create Hugo content
        hugo_content = f"---\n{yaml.dump(hugo_frontmatter)}---\n\n{content}"

        # Determine destination path
        rel_path = file_path.relative_to(OBSIDIAN_VAULT)
        clean_rel_path = clean_path(rel_path)
        dest_path = HUGO_CONTENT / section / clean_rel_path

        # Create parent directories
        dest_path.parent.mkdir(parents=True, exist_ok=True)

        # Write the file
        with open(dest_path, "w", encoding="utf-8") as f:
            f.write(hugo_content)

        logger.info(f"Processed: {rel_path} -> {dest_path.relative_to(HUGO_CONTENT)}")

    except Exception as e:
        logger.error(f"Failed to process file {file_path}: {str(e)}", exc_info=True)
        raise


def cleanup_content_directory(dir):
    shutil.rmtree(dir)
    dir.mkdir(parents=True, exist_ok=True)


def main():
    logger = setup_logging()
    logger.info("Starting Obsidian to Hugo sync")
    logger.debug(f"OBSIDIAN_VAULT: {OBSIDIAN_VAULT}")
    logger.debug(f"HUGO_CONTENT: {HUGO_CONTENT}")

    try:
        # Validate environment
        if not OBSIDIAN_VAULT or not HUGO_CONTENT:
            raise ValueError("OBSIDIAN_VAULT and HUGO_CONTENT must be set")

        if not OBSIDIAN_VAULT.exists():
            raise ValueError(f"Obsidian vault not found: {OBSIDIAN_VAULT}")

        # Clean and recreate content directory
        if HUGO_CONTENT.exists():
            logger.info("Cleaning existing content directory")
            shutil.rmtree(HUGO_CONTENT)
        HUGO_CONTENT.mkdir(exist_ok=True)

        # Find and process published notes
        logger.info("Finding published notes")
        published_notes = find_published_notes(OBSIDIAN_VAULT)
        logger.info(f"Found {len(published_notes)} published notes")

        # Process each published note
        for note in published_notes:
            process_file(note)

        logger.info("Sync completed successfully")

    except Exception as e:
        logger.error(f"Sync failed: {str(e)}", exc_info=True)
        raise


if __name__ == "__main__":
    main()
